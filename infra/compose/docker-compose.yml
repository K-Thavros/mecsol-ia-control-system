version: '3.8'

networks:
  mecsol_net:
    driver: bridge

volumes:
  postgres_data:
  nocodb_data:
  n8n_data:
  odoo_data:
  odoo_extra_addons:
  grafana_data:
  certbot_etc:
  certbot_var:
  nginx_html:

services:
  # --- Base de Datos Central ---
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../db/sql:/docker-entrypoint-initdb.d
    env_file:
      - ../../.env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=${TZ}
    networks:
      - mecsol_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Plataformas No-Code y ERP ---
  nocodb:
    image: nocodb/nocodb:latest
    container_name: nocodb
    restart: unless-stopped
    depends_on:
      - postgres
    volumes:
      - nocodb_data:/usr/app/data
    env_file:
      - ../../.env
    environment:
      - NC_DB=pg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - NC_AUTH_JWT_SECRET=${NC_AUTH_JWT_SECRET}
      - TZ=${TZ}
    networks:
      - mecsol_net

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    depends_on:
      - postgres
    volumes:
      - n8n_data:/home/node/.n8n
      - ../../pipelines/n8n:/n8n-workflows
    env_file:
      - ../../.env
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB_N8N}
      - DB_POSTGRESDB_USER=${POSTGRES_USER_N8N}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD_N8N}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - WEBHOOK_URL=https://n8n-${ENVIRONMENT}.${DOMAIN}
      - GENERIC_TIMEZONE=${TZ}
    networks:
      - mecsol_net

  odoo:
    image: odoo:16.0
    container_name: odoo
    restart: unless-stopped
    depends_on:
      - postgres
    volumes:
      - odoo_data:/var/lib/odoo
      - odoo_extra_addons:/mnt/extra-addons
    env_file:
      - ../../.env
    environment:
      - HOST=postgres
      - USER=${POSTGRES_USER}
      - PASSWORD=${POSTGRES_PASSWORD}
      - ODOO_MASTER_PASSWORD=${ODOO_MASTER_PASSWORD}
    networks:
      - mecsol_net

  # --- Analítica y Orquestación ---
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ../../dashboards/grafana/provisioning:/etc/grafana/provisioning
    env_file:
      - ../../.env
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SERVER_ROOT_URL=https://grafana-${ENVIRONMENT}.${DOMAIN}
      - GF_INSTALL_PLUGINS=grafana-postgresql-datasource
      - TZ=${TZ}
    networks:
      - mecsol_net

  fastapi:
    container_name: fastapi
    restart: unless-stopped
    build:
      context: ../../apps/fastapi
      dockerfile: Dockerfile
    depends_on:
      - postgres
    env_file:
      - ../../.env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGINS=https://*.${DOMAIN},http://localhost:8000
      - TZ=${TZ}
    networks:
      - mecsol_net

  # --- Proxy y SSL ---
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../../infra/nginx/templates:/etc/nginx/templates
      - ../../infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - certbot_etc:/etc/letsencrypt
      - nginx_html:/var/www/certbot
    env_file:
      - ../../.env
    command: /bin/sh -c "envsubst '$$DOMAIN $$ENVIRONMENT' < /etc/nginx/templates/default.conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
    depends_on:
      - nocodb
      - n8n
      - odoo
      - grafana
      - fastapi
    networks:
      - mecsol_net

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    volumes:
      - certbot_etc:/etc/letsencrypt
      - certbot_var:/var/lib/letsencrypt
      - nginx_html:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
